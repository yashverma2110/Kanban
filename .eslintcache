[{"G:\\Projects\\Kanban\\kanban\\src\\index.js":"1","G:\\Projects\\Kanban\\kanban\\src\\App.js":"2","G:\\Projects\\Kanban\\kanban\\src\\reportWebVitals.js":"3","G:\\Projects\\Kanban\\kanban\\src\\utils\\const.js":"4","G:\\Projects\\Kanban\\kanban\\src\\modules\\auth\\index.js":"5","G:\\Projects\\Kanban\\kanban\\src\\assets\\theme\\theme.js":"6","G:\\Projects\\Kanban\\kanban\\src\\modules\\auth\\views\\Enter.js":"7","G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\index.js":"8","G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\view\\index.js":"9","G:\\Projects\\Kanban\\kanban\\src\\shared\\layout\\Header\\index.js":"10","G:\\Projects\\Kanban\\kanban\\src\\shared\\index.js":"11","G:\\Projects\\Kanban\\kanban\\src\\utils\\common.js":"12","G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\components\\Banner.js":"13","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\index.js":"14","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\views\\index.js":"15","G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\ContributorList.js":"16","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\components\\Container.js":"17","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\components\\SwipableCard.js":"18","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\components\\TaskPop.js":"19","G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\SearchInput.js":"20","G:\\Projects\\Kanban\\kanban\\src\\modules\\auth\\apis\\api.js":"21","G:\\Projects\\Kanban\\kanban\\src\\utils\\apiConfig.js":"22","G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\apis\\api.js":"23","G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\components\\AddBoard.js":"24","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\apis\\api.js":"25","G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\MemberSelector.js":"26","G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\Loader.js":"27"},{"size":500,"mtime":1607774132772,"results":"28","hashOfConfig":"29"},{"size":1837,"mtime":1608143768340,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1607774132772,"results":"31","hashOfConfig":"29"},{"size":321,"mtime":1607947716476,"results":"32","hashOfConfig":"29"},{"size":2548,"mtime":1607919690018,"results":"33","hashOfConfig":"29"},{"size":266,"mtime":1607917525575,"results":"34","hashOfConfig":"29"},{"size":4557,"mtime":1608192996133,"results":"35","hashOfConfig":"29"},{"size":1673,"mtime":1608041260823,"results":"36","hashOfConfig":"29"},{"size":3873,"mtime":1608145378916,"results":"37","hashOfConfig":"29"},{"size":1169,"mtime":1608141702166,"results":"38","hashOfConfig":"29"},{"size":1281,"mtime":1608140932279,"results":"39","hashOfConfig":"29"},{"size":675,"mtime":1608041666578,"results":"40","hashOfConfig":"29"},{"size":1306,"mtime":1608031975584,"results":"41","hashOfConfig":"29"},{"size":1854,"mtime":1608141362357,"results":"42","hashOfConfig":"29"},{"size":4177,"mtime":1608145538390,"results":"43","hashOfConfig":"29"},{"size":673,"mtime":1608037479338,"results":"44","hashOfConfig":"29"},{"size":2283,"mtime":1608128325933,"results":"45","hashOfConfig":"29"},{"size":2111,"mtime":1608140369513,"results":"46","hashOfConfig":"29"},{"size":4726,"mtime":1608141949078,"results":"47","hashOfConfig":"29"},{"size":892,"mtime":1608105817077,"results":"48","hashOfConfig":"29"},{"size":839,"mtime":1608030696635,"results":"49","hashOfConfig":"29"},{"size":133,"mtime":1608148966330,"results":"50","hashOfConfig":"29"},{"size":847,"mtime":1608042702084,"results":"51","hashOfConfig":"29"},{"size":3115,"mtime":1608141887589,"results":"52","hashOfConfig":"29"},{"size":1563,"mtime":1608139782072,"results":"53","hashOfConfig":"29"},{"size":2584,"mtime":1608136788749,"results":"54","hashOfConfig":"29"},{"size":341,"mtime":1608140834297,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"k54ywb",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"G:\\Projects\\Kanban\\kanban\\src\\index.js",[],["118","119"],"G:\\Projects\\Kanban\\kanban\\src\\App.js",[],"G:\\Projects\\Kanban\\kanban\\src\\reportWebVitals.js",[],"G:\\Projects\\Kanban\\kanban\\src\\utils\\const.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\auth\\index.js",[],"G:\\Projects\\Kanban\\kanban\\src\\assets\\theme\\theme.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\auth\\views\\Enter.js",["120","121","122"],"G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\index.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\view\\index.js",["123","124","125"],"import {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  CardActionArea,\r\n  Box,\r\n  Chip,\r\n  CardHeader,\r\n  IconButton,\r\n  Popper,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Banner } from \"../components/Banner\";\r\nimport { dashboardStyles } from \"..\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ContributorList } from \"../../../shared/components/ContributorList\";\r\nimport { getAllBoards } from \"../apis/api\";\r\nimport { AddBoard } from \"../components/AddBoard\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport Info from \"@material-ui/icons/Info\";\r\nimport { getFormattedDate, isAuthenticated } from \"../../../utils/common\";\r\nimport { Loader } from \"../../../shared/components/Loader\";\r\n\r\nconst Dashboard = ({ toggleSnackbar }) => {\r\n  const classes = dashboardStyles();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(true);\r\n  const [boards, setBoards] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [currDesc, setCurrDesc] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated()) history.push(\"/\");\r\n  }, [0]);\r\n\r\n  useEffect(() => {\r\n    getAllBoards((data) => {\r\n      if (!data?.error) {\r\n        setBoards(data.boards);\r\n        setLoading(false);\r\n      } else {\r\n        toggleSnackbar({\r\n          severity: \"error\",\r\n          status: data.error,\r\n        });\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }, [open]);\r\n\r\n  const infoHandler = (event, desc) => {\r\n    event.stopPropagation();\r\n    setCurrDesc(desc);\r\n    setAnchorEl(event.target);\r\n    setTimeout(() => setAnchorEl(null), 2000);\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  if (boards.length === 0)\r\n    return (\r\n      <>\r\n        <Banner setOpen={setOpen} />\r\n        <AddBoard\r\n          open={open}\r\n          onClose={() => setOpen(false)}\r\n          toggleSnackbar={toggleSnackbar}\r\n        />\r\n      </>\r\n    );\r\n  else\r\n    return (\r\n      <Grid container spacing={2} className={classes.root}>\r\n        <Grid item xs={12}>\r\n          <Box display=\"flex\" justifyContent=\"center\">\r\n            <Chip\r\n              label={<Typography variant=\"h6\">New Board</Typography>}\r\n              icon={<Add color=\"primary\" />}\r\n              onClick={() => setOpen(true)}\r\n              color=\"secondary\"\r\n            />\r\n          </Box>\r\n        </Grid>\r\n        {boards.map((board, index) => (\r\n          <Grid key={index} item xs={12} sm={4} lg={2}>\r\n            <Card\r\n              onClick={(e) => history.push(`/board?id=${board._id}`)}\r\n              style={{ height: \"25vh\" }}\r\n            >\r\n              <CardActionArea>\r\n                <CardHeader\r\n                  title={board.title}\r\n                  action={\r\n                    <IconButton\r\n                      onClick={(e) =>\r\n                        infoHandler(e, getFormattedDate(board.createdAt))\r\n                      }\r\n                    >\r\n                      <Info />\r\n                    </IconButton>\r\n                  }\r\n                />\r\n                <CardContent>\r\n                  <Typography>{board.desc}</Typography>\r\n                  <br />\r\n                  <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                    <ContributorList list={board.contributors} />\r\n                  </Box>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n        <AddBoard\r\n          open={open}\r\n          onClose={() => setOpen(false)}\r\n          toggleSnackbar={toggleSnackbar}\r\n        />\r\n        <Popper open={Boolean(anchorEl)} anchorEl={anchorEl}>\r\n          <Paper elevation={3} className={classes.popper}>\r\n            {currDesc}\r\n          </Paper>\r\n        </Popper>\r\n      </Grid>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","G:\\Projects\\Kanban\\kanban\\src\\shared\\layout\\Header\\index.js",[],"G:\\Projects\\Kanban\\kanban\\src\\shared\\index.js",[],"G:\\Projects\\Kanban\\kanban\\src\\utils\\common.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\components\\Banner.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\index.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\views\\index.js",["126","127"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  Popper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { Container } from \"../components/Container\";\r\nimport { boardPageStyles } from \"..\";\r\nimport { TaskPopUp } from \"../components/TaskPop\";\r\nimport { boardTypes } from \"../../../utils/const\";\r\nimport { getAllTasks, updateBoard } from \"../apis/api\";\r\nimport { MemberSelector } from \"../../../shared/components/MemberSelector\";\r\nimport { getAllUsers } from \"../../dashboard/apis/api\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport { Loader } from \"../../../shared/components/Loader\";\r\nimport { isAuthenticated } from \"../../../utils/common\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Board = ({ toggleSnackbar }) => {\r\n  const classes = boardPageStyles();\r\n  const id = window.location.href.split(\"=\")[1];\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(true);\r\n  const [open, setOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [users, setUsers] = useState([]);\r\n  const [currTask, setCurrTask] = useState(null);\r\n  const [type, setType] = useState(\"add\");\r\n  const [boardDetails, setBoardDetails] = useState({});\r\n  const [refreshParam, setRefreshParam] = useState(\"\");\r\n  const [selectedContributors, setSelectedContributos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated()) history.push(\"/\");\r\n    getAllTasks(id, (data) => {\r\n      if (!data?.error) {\r\n        setBoardDetails(data.board);\r\n        setLoading(false);\r\n      } else\r\n        toggleSnackbar({\r\n          severity: \"error\",\r\n          status: data.error,\r\n        });\r\n      setLoading(false);\r\n    });\r\n    getUsers();\r\n  }, [0]);\r\n\r\n  const getUsers = () => {\r\n    getAllUsers((data) => {\r\n      setUsers(data.users);\r\n    });\r\n  };\r\n\r\n  const getDataFromMemberSelector = (data) => {\r\n    setSelectedContributos(data);\r\n  };\r\n\r\n  const handleEditBoardContributors = (data) => {\r\n    updateBoard(\r\n      { contributors: selectedContributors, _id: boardDetails._id },\r\n      (data) => {\r\n        setBoardDetails(data.board);\r\n        setAnchorEl(null);\r\n      }\r\n    );\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container spacing={2} className={classes.root}>\r\n      <Grid item xs={12}>\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <Chip\r\n            label={<Typography variant=\"h6\">Edit contributors</Typography>}\r\n            icon={<Edit color=\"primary\" />}\r\n            onClick={({ target }) => setAnchorEl(target)}\r\n            color=\"secondary\"\r\n          />\r\n        </Box>\r\n      </Grid>\r\n      {boardTypes.map((t, index) => (\r\n        <Grid item xs={12} sm={6} lg={3} key={index}>\r\n          <Container\r\n            title={t}\r\n            board={boardDetails}\r\n            open={open}\r\n            setCurrTask={setCurrTask}\r\n            setOpen={setOpen}\r\n            setType={setType}\r\n            refreshParam={refreshParam}\r\n            setRefreshParam={setRefreshParam}\r\n          />\r\n        </Grid>\r\n      ))}\r\n      <Popper\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={() => setAnchorEl(null)}\r\n        className={classes.popper}\r\n      >\r\n        <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\">\r\n          <IconButton onClick={() => setAnchorEl(null)} style={{ padding: 0 }}>\r\n            <Close />\r\n          </IconButton>\r\n        </Box>\r\n        <MemberSelector\r\n          list={users}\r\n          selectedList={boardDetails.contributors}\r\n          getData={getDataFromMemberSelector}\r\n        />\r\n        <Box display=\"flex\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            fullWidth\r\n            onClick={handleEditBoardContributors}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Box>\r\n      </Popper>\r\n      <TaskPopUp\r\n        open={open}\r\n        setOpen={setOpen}\r\n        task={currTask}\r\n        board={boardDetails}\r\n        type={type}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\ContributorList.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\components\\Container.js",["128"],"import React, { useEffect, useState } from \"react\";\r\nimport { Box, Button, Grid, Paper, Typography } from \"@material-ui/core\";\r\nimport { containerStyles } from \"..\";\r\nimport { SwipeableCard } from \"./SwipableCard\";\r\nimport DoneAll from \"@material-ui/icons/DoneAll\";\r\nimport Add from \"@material-ui/icons/Add\";\r\nimport { getTasks } from \"../apis/api\";\r\n\r\nexport const Container = ({\r\n  title,\r\n  board,\r\n  setOpen,\r\n  setCurrTask,\r\n  setType,\r\n  open,\r\n  refreshParam,\r\n  setRefreshParam,\r\n}) => {\r\n  const classes = containerStyles();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [refresh, setRefresh] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (board._id || refreshParam === title) {\r\n      getTasks({ status: title, id: board._id }, (data) => {\r\n        if (!data?.error) {\r\n          setTasks(data.tasks);\r\n        }\r\n      });\r\n    }\r\n  }, [board, open, refresh, refreshParam]);\r\n\r\n  const clickHandler = (i) => {\r\n    setOpen(title);\r\n    setType(\"edit\");\r\n    setCurrTask(tasks[i]);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root} elevation={4}>\r\n      <Grid container>\r\n        <Grid item xs={12} className={classes.titleBox}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            {title}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.cardBox}>\r\n          {tasks.length === 0 && (\r\n            <Box className={classes.empty}>\r\n              <DoneAll color=\"primary\" />\r\n              <Typography>All Sorted!</Typography>\r\n            </Box>\r\n          )}\r\n          {tasks.map((task, index) => (\r\n            <SwipeableCard\r\n              task={{ ...task, index }}\r\n              key={index}\r\n              setRefresh={setRefresh}\r\n              setRefreshParam={setRefreshParam}\r\n              clickHandler={clickHandler}\r\n            />\r\n          ))}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ width: \"100%\" }}\r\n            startIcon={<Add color=\"secondary\" />}\r\n            onClick={() => {\r\n              setType(\"add\");\r\n              setOpen(title);\r\n            }}\r\n          >\r\n            Add Task\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\components\\SwipableCard.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\components\\TaskPop.js",["129"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Grid,\r\n  Modal,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { taskPopUpStyles } from \"..\";\r\nimport { boardTypes } from \"../../../utils/const\";\r\nimport { addTask, updateTask } from \"../apis/api\";\r\nimport { MemberSelector } from \"../../../shared/components/MemberSelector\";\r\n\r\nexport const TaskPopUp = ({ open, setOpen, task, type, board }) => {\r\n  const classes = taskPopUpStyles();\r\n  const [edit, setEdit] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    contributors: [],\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      if (type === \"add\") {\r\n        setEdit(true);\r\n      } else {\r\n        setFormData(task);\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  const handleChange = ({ target }) => {\r\n    let temp = { ...formData };\r\n    temp[target.name] = target.value;\r\n    validate(temp);\r\n    setFormData({ ...temp });\r\n  };\r\n\r\n  const validate = (data) => {\r\n    let error = { ...errors };\r\n    if (!data?.title && data.title !== \"\") error.title = \"Required\";\r\n    else delete error.title;\r\n    setErrors(error);\r\n  };\r\n\r\n  const getContribtorList = (data) => {\r\n    setFormData({ ...formData, contributors: data });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    validate(formData);\r\n    const check = Object.keys(errors).length === 0;\r\n    if (check) {\r\n      if (type === \"add\")\r\n        addTask({ ...formData, id: board._id, status: open }, () => {\r\n          setOpen(false);\r\n        });\r\n      else\r\n        updateTask({ ...formData }, () => {\r\n          setEdit(false);\r\n          setOpen(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={Boolean(open)}\r\n      onClose={() => setOpen(false)}\r\n      className={classes.root}\r\n    >\r\n      <Grid container className={classes.modal}>\r\n        <Grid item xs={12} style={{ padding: \"1rem\" }}>\r\n          <Grid container alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Title\"\r\n                required\r\n                value={formData?.title}\r\n                error={errors?.title && errors.title !== \"\"}\r\n                helperText={errors.title}\r\n                disabled={!edit}\r\n                inputProps={{\r\n                  autocomplete: \"off\",\r\n                }}\r\n                style={{ width: \"100%\" }}\r\n                name=\"title\"\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <MemberSelector\r\n                type={type}\r\n                list={board.contributors}\r\n                selectedList={task?.contributors}\r\n                getData={getContribtorList}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Description\"\r\n                multiline\r\n                rows={3}\r\n                inputProps={{\r\n                  autocomplete: \"off\",\r\n                }}\r\n                rowsMax={5}\r\n                value={formData?.desc}\r\n                disabled={!edit}\r\n                style={{ width: \"100%\" }}\r\n                name=\"desc\"\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            {type !== \"add\" && (\r\n              <Grid item xs={12}>\r\n                <br />\r\n                <Typography>Move To</Typography>\r\n                <ButtonGroup color=\"primary\" variant=\"text\">\r\n                  {boardTypes.map((type, index) => {\r\n                    if (type !== task.status)\r\n                      return (\r\n                        <Button\r\n                          key={index}\r\n                          onClick={() =>\r\n                            setFormData({ ...formData, status: type })\r\n                          }\r\n                        >\r\n                          {type}\r\n                        </Button>\r\n                      );\r\n                    return \"\";\r\n                  })}\r\n                </ButtonGroup>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {!edit ? (\r\n            <Button\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              onClick={() => setEdit(true)}\r\n              className={classes.btn}\r\n            >\r\n              Edit\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              className={classes.btn}\r\n              onClick={handleSubmit}\r\n            >\r\n              Save\r\n            </Button>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Modal>\r\n  );\r\n};\r\n","G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\SearchInput.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\auth\\apis\\api.js",[],"G:\\Projects\\Kanban\\kanban\\src\\utils\\apiConfig.js",["130"],"const BASE_URL = \"http://localhost:3001\";\r\nconst PROD_URL = \"https://kanbanback.herokuapp.com\";\r\n\r\nexport const API_URL = PROD_URL;\r\n","G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\apis\\api.js",[],"G:\\Projects\\Kanban\\kanban\\src\\modules\\dashboard\\components\\AddBoard.js",["131","132","133","134","135"],"import {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Modal,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { addBoardStyles } from \"..\";\r\nimport { MemberSelector } from \"../../../shared/components/MemberSelector\";\r\nimport { SearchInput } from \"../../../shared/components/SearchInput\";\r\nimport { getUserDetails } from \"../../../utils/common\";\r\nimport { addNewBoard, getAllUsers } from \"../apis/api\";\r\n\r\nexport const AddBoard = ({ open, onClose, toggleSnackbar }) => {\r\n  const classes = addBoardStyles();\r\n  const [formData, setFormData] = useState({});\r\n  const [users, setUsers] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [0]);\r\n\r\n  const getData = () => {\r\n    getAllUsers((data) => {\r\n      setUsers(data.users);\r\n    });\r\n  };\r\n\r\n  const validate = (data) => {\r\n    let error = { ...errors };\r\n    if (!data?.title || data.title.trim() === \"\") error.title = \"Required\";\r\n    else if (data.title.length > 20) error.title = \"Only 20 charachters\";\r\n    else delete error.title;\r\n    if (!data?.desc || data.desc.trim() === \"\") error.desc = \"Required\";\r\n    else if (data.desc.length > 30) error.desc = \"Only 30 charachters\";\r\n    else delete error.desc;\r\n    setErrors({ ...error });\r\n  };\r\n\r\n  const handleChangeTextField = ({ target }) => {\r\n    let temp = { ...formData };\r\n    temp[target.name] = target.value;\r\n    validate(temp);\r\n    setFormData({ ...temp });\r\n  };\r\n\r\n  const handleAddBoard = (e) => {\r\n    e.preventDefault();\r\n    validate(formData);\r\n    const check = Object.keys(errors).length === 0;\r\n    if (check) {\r\n      addNewBoard(formData, (data) => {\r\n        if (!data.error) {\r\n          onClose();\r\n        } else\r\n          toggleSnackbar({\r\n            severity: \"error\",\r\n            status: data.error,\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  const getContributorsData = (data) => {\r\n    setFormData({ ...formData, contributors: data });\r\n  };\r\n\r\n  return (\r\n    <Modal open={open} onClose={onClose} className={classes.root}>\r\n      <Box className={classes.addBoard}>\r\n        <Box className={classes.fields}>\r\n          <TextField\r\n            name=\"title\"\r\n            label=\"Title\"\r\n            error={errors?.title && errors?.title !== \"\"}\r\n            helperText={errors?.title}\r\n            inputProps={{\r\n              autocomplete: \"off\",\r\n            }}\r\n            required\r\n            onChange={handleChangeTextField}\r\n          />\r\n          <TextField\r\n            name=\"desc\"\r\n            label=\"Description\"\r\n            inputProps={{\r\n              autocomplete: \"off\",\r\n            }}\r\n            error={errors?.desc && errors.desc !== \"\"}\r\n            helperText={errors?.desc}\r\n            required\r\n            onChange={handleChangeTextField}\r\n          />\r\n          <Box>\r\n            <MemberSelector list={users} getData={getContributorsData} />\r\n          </Box>\r\n        </Box>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={handleAddBoard}>\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n","G:\\Projects\\Kanban\\kanban\\src\\modules\\board\\apis\\api.js",[],"G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\MemberSelector.js",["136"],"import React, { useEffect, useState } from \"react\";\r\nimport { Box, Chip, Avatar, Divider } from \"@material-ui/core\";\r\nimport { SearchInput } from \"./SearchInput\";\r\nimport { generateRandomColor, getUserDetails } from \"../../utils/common\";\r\nimport { memberListStyles } from \"..\";\r\n\r\nexport const MemberSelector = (props) => {\r\n  const classes = memberListStyles();\r\n  const [searchQry, setSearchQry] = useState(\"\");\r\n  const [userList, setUserList] = useState(props.list);\r\n  const [selectedUserList, setSelectedUserList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (props.selectedList) {\r\n      let checkArray = props.selectedList.map((s) => s._id);\r\n      let temp = props.list.filter((s) => !checkArray.includes(s._id));\r\n      setSelectedUserList(props.selectedList);\r\n      setUserList(temp);\r\n    }\r\n  }, [props.selectedList]);\r\n\r\n  const contributorsSearchHandler = (qry) => {\r\n    setSearchQry(qry);\r\n  };\r\n\r\n  const handleAddContributors = (user) => {\r\n    let temp = userList.filter((mem) => mem._id !== user._id);\r\n    setUserList(temp);\r\n    setSelectedUserList([...selectedUserList, user]);\r\n    props.getData([...selectedUserList, user]);\r\n  };\r\n\r\n  const handleContributorRemoval = (user) => {\r\n    let temp = selectedUserList.filter((mem) => mem._id !== user._id);\r\n    setSelectedUserList(temp);\r\n    setUserList([...userList, user]);\r\n    props.getData(temp);\r\n  };\r\n\r\n  const getUserChip = (member, index, onDelete) => (\r\n    <Chip\r\n      key={index}\r\n      className={classes.chip}\r\n      style={{ margin: \"5px\" }}\r\n      avatar={\r\n        <Avatar\r\n          style={{ background: generateRandomColor() }}\r\n          src={\"\"}\r\n          alt=\"person\"\r\n        >\r\n          {member.name[0]}\r\n        </Avatar>\r\n      }\r\n      label={member.name}\r\n      onClick={() => (!onDelete ? handleAddContributors(member) : onDelete)}\r\n      onDelete={onDelete}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <SearchInput title=\"Members\" searchHandler={contributorsSearchHandler} />\r\n      <Box display=\"flex\" className={classes.selectedContainer}>\r\n        {selectedUserList.map((user, index) =>\r\n          getUserChip(user, index, () => handleContributorRemoval(user))\r\n        )}\r\n      </Box>\r\n      <Divider />\r\n      <Box>\r\n        {userList.map((member, index) => {\r\n          if (\r\n            (searchQry === \"\" || member.name.includes(searchQry)) &&\r\n            getUserDetails()._id !== member._id\r\n          )\r\n            return getUserChip(member, index, false);\r\n          else return \"\";\r\n        })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","G:\\Projects\\Kanban\\kanban\\src\\shared\\components\\Loader.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":3,"column":3,"nodeType":"143","messageId":"144","endLine":3,"endColumn":6},{"ruleId":"145","severity":1,"message":"146","line":25,"column":6,"nodeType":"147","endLine":25,"endColumn":9,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":25,"column":7,"nodeType":"150","endLine":25,"endColumn":8},{"ruleId":"145","severity":1,"message":"146","line":37,"column":6,"nodeType":"147","endLine":37,"endColumn":9,"suggestions":"151"},{"ruleId":"145","severity":1,"message":"149","line":37,"column":7,"nodeType":"150","endLine":37,"endColumn":8},{"ruleId":"145","severity":1,"message":"152","line":52,"column":6,"nodeType":"147","endLine":52,"endColumn":12,"suggestions":"153"},{"ruleId":"145","severity":1,"message":"154","line":52,"column":6,"nodeType":"147","endLine":52,"endColumn":9,"suggestions":"155"},{"ruleId":"145","severity":1,"message":"149","line":52,"column":7,"nodeType":"150","endLine":52,"endColumn":8},{"ruleId":"145","severity":1,"message":"156","line":29,"column":6,"nodeType":"147","endLine":29,"endColumn":28,"suggestions":"157"},{"ruleId":"145","severity":1,"message":"158","line":31,"column":6,"nodeType":"147","endLine":31,"endColumn":12,"suggestions":"159"},{"ruleId":"141","severity":1,"message":"160","line":1,"column":7,"nodeType":"143","messageId":"144","endLine":1,"endColumn":15},{"ruleId":"141","severity":1,"message":"161","line":4,"column":3,"nodeType":"143","messageId":"144","endLine":4,"endColumn":11},{"ruleId":"141","severity":1,"message":"162","line":5,"column":3,"nodeType":"143","messageId":"144","endLine":5,"endColumn":7},{"ruleId":"141","severity":1,"message":"163","line":12,"column":10,"nodeType":"143","messageId":"144","endLine":12,"endColumn":21},{"ruleId":"141","severity":1,"message":"164","line":13,"column":10,"nodeType":"143","messageId":"144","endLine":13,"endColumn":24},{"ruleId":"145","severity":1,"message":"149","line":24,"column":7,"nodeType":"150","endLine":24,"endColumn":8},{"ruleId":"145","severity":1,"message":"165","line":20,"column":6,"nodeType":"147","endLine":20,"endColumn":26,"suggestions":"166"},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["169"],"The 0 literal is not a valid dependency because it never changes. You can safely remove it.","Literal",["170"],"React Hook useEffect has a missing dependency: 'toggleSnackbar'. Either include it or remove the dependency array. If 'toggleSnackbar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["171"],"React Hook useEffect has missing dependencies: 'history', 'id', and 'toggleSnackbar'. Either include them or remove the dependency array. If 'toggleSnackbar' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["172"],"React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'task' and 'type'. Either include them or remove the dependency array. If 'setFormData' needs the current value of 'task', you can also switch to useReducer instead of useState and read 'task' in the reducer.",["174"],"'BASE_URL' is assigned a value but never used.","'Checkbox' is defined but never used.","'Chip' is defined but never used.","'SearchInput' is defined but never used.","'getUserDetails' is defined but never used.","React Hook useEffect has a missing dependency: 'props.list'. Either include it or remove the dependency array.",["175"],"no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"176","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [history]",{"range":"189","text":"190"},{"range":"191","text":"190"},"Update the dependencies array to be: [open, toggleSnackbar]",{"range":"192","text":"193"},"Update the dependencies array to be: [history, id, toggleSnackbar]",{"range":"194","text":"195"},"Update the dependencies array to be: [board, open, refresh, title]",{"range":"196","text":"197"},"Update the dependencies array to be: [open, task, type]",{"range":"198","text":"199"},"Update the dependencies array to be: [props.list, props.selectedList]",{"range":"200","text":"201"},[803,806],"[history]",[1196,1199],[1511,1517],"[open, toggleSnackbar]",[1817,1820],"[history, id, toggleSnackbar]",[791,813],"[board, open, refresh, title]",[820,826],"[open, task, type]",[812,832],"[props.list, props.selectedList]"]